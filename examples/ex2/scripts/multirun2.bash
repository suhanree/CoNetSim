#! /bin/bash

# Script for multiple runs with different random seeds.

if (( $# != 17 )); then
	echo "Usage: $0 <nnodes> <total_time> <Xsize> <Ysize> <coupling_constant> <op_threshold> <if_multilink> <topology> <time_interval> <number_edges> <ag_threshold> <graph_method> <neighbor_type> <movement_type> <update_method> <rewiring_ratio> <# of runs>"
	echo "	if_multilink: 0-no, 2-yes"
	echo "  topology: 1-linear, 2-circular"
	echo "  time_interval < 0: no snapshot for ag, sg, node states"
	echo "  number_edges: 0: no AG, different filenames, -1: file input (agraph.in)"
	echo "	graph_method: 0-none, 1-Mathematica, 2-gnuplot, 3-both"
	echo "	neighbor_type: 1-von Neumann (5 locations), 3-Moore (8 locations), 5-same location (1 location)"
	echo "	movement_type: 1-von Neumann+center, 2-von Neumann, 3-Moore+center, 4-Moore [node_max_speed=1]"
	echo "	"
	echo "information about summary files:"
	echo "	summary~_edges: number of edges for all runs (input: summary file for each run)"
	echo "	summary~_times: final time (or converged time) for all runs (input: summary file for each run)"
	echo "	summary~_ncomponents: number of opinion groups for all runs (input: summary file for each run)"
	echo "	summary~_conv: number of AG clusters for all runs (input: summary file for each run)"
	echo "	summary~: 1st line: <# of not converged> <# of converged> <# of all runs> <# of not converged>/<# of all runs>"
	echo " 		  >1 lines: <# of opinion groups> <# of runs> (input: summary~_time and summary~_conv)"
	echo "	summary~_opclusters:   (input: opinion file for all run, obtained from cluster files using FindOpinion3)"
	echo "	summary~_nopinions: <# of opinion groups, 0%> <# of opinion groups, 10%> <# of opinion groups, 20%> <# of opinion groups, 50%> <# of opinion groups, 100%>  (input: cluster file for each run, using FindOpinions3)"
	echo "	summary~_nvalues: average and SD from summary~_nopinions  (input: summary~_nopinions, using stat2_rw2.bash)"
	echo "		*note: cluster file: generated by RWMain (format: <AG cluster id> <agent id> <opinion>)"
	exit 1
fi

if (( ${17} > 10000 )); then
	echo "  Too big # of all runs (Max=10000)."
	exit 1
fi

executable="Ex2"

cp $CONET"/bin/"$executable .

pos=`expr index  ${10} 123456789`
if (( $pos != 0 )); then
	num_edge=`expr substr ${10} $pos 6`
else
	num_edge=${10}
fi

if (( $num_edge != 0 ))
then
   if (( $num_edge < 0 )); then
   	evalue="File"
   else
   	evalue=${10}
   fi
   filename1="summary_n"$1"_x"$3"_y"$4"_g"$5"_o"$6"_s"$8"_e"$evalue"_ag"${11}"_ne"${13}"_mo"${14}
   filename2="components_n"$1"_x"$3"_y"$4"_g"$5"_o"$6"_s"$8"_e"$evalue"_ag"${11}"_ne"${13}"_mo"${14}
   filename3="node_states_n"$1"_x"$3"_y"$4"_g"$5"_o"$6"_s"$8"_e"$evalue"_ag"${11}"_ne"${13}"_mo"${14}
   filename4="ex2_n"$1"_x"$3"_y"$4"_g"$5"_o"$6"_s"$8"_e"$evalue"_ag"${11}"_ne"${13}"_mo"${14}
   filename5="snapshot_n"$1"_x"$3"_y"$4"_g"$5"_o"$6"_s"$8"_e"$evalue"_ag"${11}"_ne"${13}"_mo"${14}
   filename6="param_n"$1"_x"$3"_y"$4"_g"$5"_o"$6"_s"$8"_e"$evalue"_ag"${11}"_ne"${13}"_mo"${14}

   for ((i=1; i<=${17}; i++))
   do
	echo "<RUN $i> ==============================="
	if (( $i < 10 ))
	then
		filename_s=$filename1"_000"$i
		filename_c=$filename2"_000"$i
		filename_node_state=$filename3"_000"$i
		filename_snap=$filename5"_000"$i
		filename_ag="ag_"$filename5"_000"$i
		filename_sg="sg_"$filename5"_000"$i
		filename_in=$filename6"_000"$i
	elif (( $i < 100 ))
	then
		filename_s=$filename1"_00"$i
		filename_c=$filename2"_00"$i
		filename_node_state=$filename3"_00"$i
		filename_snap=$filename5"_00"$i
		filename_ag="ag_"$filename5"_00"$i
		filename_sg="sg_"$filename5"_00"$i
		filename_in=$filename6"_00"$i
	elif (( $i < 1000 ))
	then
		filename_s=$filename1"_0"$i
		filename_c=$filename2"_0"$i
		filename_node_state=$filename3"_0"$i
		filename_snap=$filename5"_0"$i
		filename_ag="ag_"$filename5"_0"$i
		filename_sg="sg_"$filename5"_0"$i
		filename_in=$filename6"_0"$i
	elif (( $i < 10000 ))
	then
		filename_s=$filename1"_"$i
		filename_c=$filename2"_"$i
		filename_node_state=$filename3"_"$i
		filename_snap=$filename5"_"$i
		filename_ag="ag_"$filename5"_"$i
		filename_sg="sg_"$filename5"_"$i
		filename_in=$filename6"_"$i
	else 
		filename_s=$filename1"_0000"
		filename_c=$filename2"_0000"
		filename_node_state=$filename3"_0000"
		filename_snap=$filename5"_0000"
		filename_ag="ag_"$filename5"_0000"
		filename_sg="sg_"$filename5"_0000"
		filename_in=$filename6"_0000"
	fi
	echo "sg_effect			true" > $filename_in
	echo "node_state_init_method	1" >> $filename_in
	echo "node_max_speed		1" >> $filename_in
	echo "convergence_method	1" >> $filename_in
	echo "convergence_check_period	100" >> $filename_in
	echo "if_nodes_in		true" >> $filename_in
	echo "in_nodes_file		agents.in" >> $filename_in
	
	echo "nnodes 		$1" >> $filename_in
	echo "total_time	$2" >> $filename_in
	echo "xsize		$3" >> $filename_in
	echo "ysize		$4" >> $filename_in
	echo "coupling_constant	$5" >> $filename_in
	echo "node_state_threshold 	$6" >> $filename_in
	echo "update_method		${15}" >> $filename_in
	echo "geometry		1" >> $filename_in
	max_rn=$(( $2 * 2 ))
	echo "max_rn		$max_rn" >> $filename_in
	echo "node_state_topology	$8" >> $filename_in
	if (( $num_edge < 0 ))
	then
		echo "if_agraph_in		true" >> $filename_in
		echo "in_agraph_file		agraph.in" >> $filename_in
		echo "in_agraph_file_format	2" >> $filename_in
	else
		echo "if_agraph_in		false" >> $filename_in
		echo "in_agraph_method		0" >> $filename_in
		echo "num_edges 		$num_edge" >> $filename_in
		echo "wiring_prob  		0" >> $filename_in
	fi
	echo "ag_threshold	${11}" >> $filename_in
	echo "neighbor_type_sg	${13}" >> $filename_in
	if (( ${13} < 4 ))
	then
		echo "int_range			1" >> $filename_in
	else
		echo "int_range			0" >> $filename_in
	fi
	echo "neighbor_type_movement	${14}" >> $filename_in
	echo "rewiring_ratio	${16}" >> $filename_in
	echo "if_multilink	$7" >> $filename_in
	
	echo "if_node_out false" >> $filename_in
	echo "if_cluster_out false" >> $filename_in
	echo "if_summary_out true" >> $filename_in
	echo "out_summary_file 	$filename_s" >> $filename_in
	echo "if_network_stat_out true" >> $filename_in
	echo "out_network_stat_time 	-1" >> $filename_in
	echo "if_components_out true" >> $filename_in
	echo "out_components_file 	$filename_c" >> $filename_in

	if (( $9 < 0 ))
	then
		echo "if_snapshot_out false" >> $filename_in
		echo "if_ag_snapshot_out false" >> $filename_in
		echo "if_sg_snapshot_out false" >> $filename_in
	else
		echo "if_snapshot_out true" >> $filename_in
		echo "out_snapshot_file	$filename_snap" >> $filename_in
		echo "out_snapshot_interval $9" >> $filename_in
		echo "if_ag_snapshot_out true" >> $filename_in
		echo "out_ag_snapshot_file	$filename_ag" >> $filename_in
		echo "out_ag_snapshot_method	2" >> $filename_in
		echo "out_ag_snapshot_interval $9" >> $filename_in
		echo "if_sg_snapshot_out true" >> $filename_in
		echo "out_sg_snapshot_file	$filename_sg" >> $filename_in
		echo "out_sg_snapshot_method	2" >> $filename_in
		echo "out_sg_snapshot_interval $9" >> $filename_in
	fi

	rseed1=$(( i * 20000000 + $num_edge ))
	echo "rseed1 $rseed1" >> $filename_in
	rseed2=$(( 2000000000 + $i * 1000000 + $num_edge ))
	echo "rseed2 $rseed2" >> $filename_in

	if ./$executable $filename_in
	then
		if (( $i == 1 ))
		then
			gawk '{if ($1=="time") print $2;}' $filename_s > $filename1"_time"
			gawk '{if ($1=="ncomponents") print $2;}' $filename_s > $filename1"_ncomponents"
			gawk '{if ($1=="edges") print $2;}' $filename_s > $filename1"_edges"
			FindOpinions3 $6 $filename_c $filename_node_state $8 > $filename1"_nopinions"
			cat $filename_s > $filename1
			echo "time" > $filename1"_opclusters"
			cat $filename_node_state >> $filename1"_opclusters"
			gawk 'BEGIN{cvg=0;}{if ($1=="converged" && $2>0) {
					cvg=$2; print $2;
				}; 
				if (!cvg && $1=="av_diff_x") dx=$2;
				if (!cvg && $1=="av_diff_y") dy=$2;
				if (!cvg && $1=="av_diff_p") dp=$2;
			   }END{
				if (!cvg) print 0, dx, dy, dp;}' $filename_s > $filename1"_conv"
		else
			gawk '{if ($1=="time") print $2;}' $filename_s >> $filename1"_time"
			gawk '{if ($1=="ncomponents") print $2;}' $filename_s >> $filename1"_ncomponents"
			gawk '{if ($1=="edges") print $2;}' $filename_s >> $filename1"_edges"
			FindOpinions3 $6 $filename_c $filename_node_state $8 >> $filename1"_nopinions"
			cat $filename_s >> $filename1
			echo "time" >> $filename1"_opclusters"
			cat $filename_node_state >> $filename1"_opclusters"
			gawk 'BEGIN{cvg=0;}{if ($1=="converged" && $2>0) {
					cvg=$2; print $2;
				}; 
				if (!cvg && $1=="av_diff_x") dx=$2;
				if (!cvg && $1=="av_diff_y") dy=$2;
				if (!cvg && $1=="av_diff_p") dp=$2;
			   }END{
				if (!cvg) print 0, dx, dy, dp;}' $filename_s >> $filename1"_conv"
		fi
		rm -f $filename_node_state
		
	
		if (( $9 > 0 && ${12} > 0))
		then
			echo "nagents 		$1" > getgraphs.in
			echo "xsize		$3" >> getgraphs.in
			echo "ysize		$4" >> getgraphs.in
			echo "i_time		0" >> getgraphs.in
			echo "f_time		$2" >> getgraphs.in
			echo "time_interval 	$9" >> getgraphs.in
			echo "in_file	$filename_snap" >> getgraphs.in
			echo "graph_method	${12}" >> getgraphs.in
		
			GetGraphs getgraphs.in
			filename_gif0=$filename_snap"*t???????_X.gif"
			filename_gif1=$filename_snap"*t0??????_m.gif"
			filename_gif2=$filename_snap"*t???????_g.gif"
			if (( ${12} == 1 )); then
				gifsicle --delay=50 $filename_gif1 > $filename_snap"_m.gif"
			fi
			if (( ${12} == 2 )); then
				gifsicle --delay=50 $filename_gif0 > $filename_snap"_X.gif"
				gifsicle --delay=50 $filename_gif2 > $filename_snap"_g.gif"
			fi
			if (( ${12} == 3 )); then
				gifsicle --delay=50 $filename_gif1 > $filename_snap"_m.gif"
				gifsicle --delay=50 $filename_gif0 > $filename_snap"_X.gif"
				gifsicle --delay=50 $filename_gif2 > $filename_snap"_g.gif"
			fi
			filename_data=$filename_snap"*.data*"
			filename_m=$filename_snap"*.m"
			filename_gnuplot=$filename_snap"*.gnuplot"
			rm -f $filename_gif0 $filename_gif1 $filename_gif2
			rm -f $filename_data
			rm -f $filename_m
			rm -f $filename_gnuplot
		fi

	fi
   done

   stat_rw2.bash $filename1"_edges" $filename1"_ncomponents" $filename1"_time" > $filename4
   stat2_rw2.bash $filename1"_nopinions" > $filename1"_nvalues"

   rm -f $executable

   gawk -v finaltime=$2 -v nrun=${17} 'BEGIN{cnt=0;}{if ($1<finaltime) cnt++;}\
	END{print cnt, nrun-cnt, nrun, cnt/nrun;}' $filename1"_time" > $filename1
   gawk -v nrun=${17} 'BEGIN{max=0;}{cnt[$1]++;if ($1>max) max=$1;}\
	END{for (i=0;i<=max;i++) print i, cnt[i];}' $filename1"_conv" >> $filename1

   filename1_each=$filename1"_[0-9]???"
   filename2_each=$filename2"_????"
   filename6_each=$filename6"_????"
   tar zcf $filename1".tgz" $filename1_each
   tar zcf $filename2".tgz" $filename2_each
   tar zcf $filename6".tgz" $filename6_each
   rm -f $filename1_each
   rm -f $filename6_each
   rm -f $filename2_each
   if (( $9 >= 0 )); then
	filename5_each=$filename5"_????"
	filename5_ag_each="ag_"$filename5"_????"
	filename5_sg_each="sg_"$filename5"_????"
	tar zcf $filename5".tgz" $filename5_each
	tar zcf "ag_"$filename5".tgz" $filename5_ag_each
	tar zcf "sg_"$filename5".tgz" $filename5_sg_each
	rm -f $filename5_each
	rm -f $filename5_ag_each
	rm -f $filename5_sg_each
	if (( ${12} > 0)); then
		filename7_each=$filename5"_????_?.gif"
		tar zcf $filename5"gif.tgz" $filename7_each
		rm -f $filename7_each
	fi
   fi

else
#######################################################################
   filename1="summary_n"$1"_x"$3"_y"$4"_g"$5"_o"$6"_s"$7$8"_ne"${13}"_mo"${14}
   filename2="snapshot_n"$1"_x"$3"_y"$4"_g"$5"_o"$6"_s"$7$8"_ne"${13}"_mo"${14}
   filename3="param_n"$1"_x"$3"_y"$4"_g"$5"_o"$6"_s"$7$8"_ne"${13}"_mo"${14}

   for ((i=1; i<=${17}; i++))
   do
	echo "<RUN $i> ==============================="
	if (( $i < 10 ))
	then
		filename_s=$filename1"_000"$i
		filename_snap=$filename2"_000"$i
		filename_in=$filename3"_000"$i
	elif (( $i < 100 ))
	then
		filename_s=$filename1"_00"$i
		filename_snap=$filename2"_00"$i
		filename_in=$filename3"_00"$i
	elif (( $i < 1000 ))
	then
		filename_s=$filename1"_0"$i
		filename_snap=$filename2"_0"$i
		filename_in=$filename3"_0"$i
	elif (( $i < 10000 ))
	then
		filename_s=$filename1"_"$i
		filename_snap=$filename2"_"$i
		filename_in=$filename3"_"$i
	else 
		filename_s=$filename1"_0000"
		filename_snap=$filename2"_0000"
		filename_in=$filename3"_0000"
	fi
	echo "sg_effect			true" > $filename_in
	echo "num_edges 		0" >> $filename_in
	echo "wiring_prob  		0" >> $filename_in
	echo "ag_threshold		1" >> $filename_in
	echo "op_init_method		1" >> $filename_in
	echo "standard_dev		0.2" >> $filename_in
	echo "agent_max_speed		1" >> $filename_in
	echo "convergence_method	1" >> $filename_in
	echo "convergence_check_period	100" >> $filename_in
	echo "if_agraph_in		false" >> $filename_in
	echo "in_agraph_file		agraph.in" >> $filename_in
	echo "in_agraph_file_format	2" >> $filename_in
	echo "in_agraph_method		0" >> $filename_in
	echo "if_agents_in		true" >> $filename_in
	echo "in_agents_file		agents.in" >> $filename_in
	echo "neighbor_type_sg		${13}" >> $filename_in
	if (( ${13} < 4 ))
	then
		echo "int_range			1" >> $filename_in
	else
		echo "int_range			0" >> $filename_in
	fi
	echo "neighbor_type_movement	${14}" >> $filename_in
	
	echo "nagents 		$1" >> $filename_in
	echo "total_time	$2" >> $filename_in
	echo "xsize		$3" >> $filename_in
	echo "ysize		$4" >> $filename_in
	echo "opinion_topology	$8" >> $filename_in
	echo "update_method		${15}" >> $filename_in
	if (( $7 > 2 )); then
		max_rn=$(( $2 * 2 ))
	else
		max_rn=$(( $2 + 5 ))
	fi
	echo "max_rn		$max_rn" >> $filename_in
	echo "gullibility	$5" >> $filename_in
	echo "op_threshold 	$6" >> $filename_in
	if (( $7 < 3 ))
	then
		echo "geometry		1" >> $filename_in
	else
		echo "geometry		2" >> $filename_in
		echo "in_excluded_file		excluded" >> $filename_in
	fi
	
	echo "if_ag_snapshot_out false" >> $filename_in
	echo "if_sg_snapshot_out false" >> $filename_in
	echo "if_agent_out false" >> $filename_in
	echo "if_cluster_out false" >> $filename_in
	echo "if_network_stat_out true" >> $filename_in
	echo "out_network_stat_time 	-1" >> $filename_in
	echo "if_components_out false" >> $filename_in
	echo "if_summary_out true" >> $filename_in

	echo "out_summary_file 	$filename_s" >> $filename_in
	if (( $9 >= 0 ))
	then
		echo "if_snapshot_out true" >> $filename_in
		echo "out_snapshot_interval $9" >> $filename_in
		echo "out_snapshot_file	$filename_snap" >> $filename_in
	else
		echo "if_snapshot_out false" >> $filename_in
	fi

	rseed1=$(( i * 20000000 ))
	echo "rseed1 $rseed1" >> $filename_in
	rseed2=$(( 2000000000 + $i * 1000000 ))
	echo "rseed2 $rseed2" >> $filename_in

	if ./$executable $filename_in
	then
		if (( $i == 1 ))
		then
			gawk '{if ($1=="time") print $2;}' $filename_s > $filename1"_time"
			gawk 'BEGIN{cvg=0;}{if ($1=="converged" && $2>0) {
					cvg=$2; print $2;
				}; 
				if (!cvg && $1=="av_diff_x") dx=$2;
				if (!cvg && $1=="av_diff_y") dy=$2;
				if (!cvg && $1=="av_diff_p") dp=$2;
			   }END{
				if (!cvg) print 0, dx, dy, dp;}' $filename_s > $filename1"_conv"
		else
			gawk '{if ($1=="time") print $2;}' $filename_s >> $filename1"_time"
			gawk 'BEGIN{cvg=0;}{if ($1=="converged" && $2>0) {
					cvg=$2; print $2;
				}; 
				if (!cvg && $1=="av_diff_x") dx=$2;
				if (!cvg && $1=="av_diff_y") dy=$2;
				if (!cvg && $1=="av_diff_p") dp=$2;
			   }END{
				if (!cvg) print 0, dx, dy, dp;}' $filename_s >> $filename1"_conv"
		fi
		# rm -f $filename_s
	
		if (( $9 > 0 && ${12} > 0))
		then
			echo "nagents 		$1" > getgraphs.in
			echo "xsize		$3" >> getgraphs.in
			echo "ysize		$4" >> getgraphs.in
			echo "i_time		0" >> getgraphs.in
			echo "f_time		$2" >> getgraphs.in
			echo "time_interval 	$9" >> getgraphs.in
			echo "in_file		$filename_snap" >> getgraphs.in
			echo "graph_method	${12}" >> getgraphs.in
		
			GetGraphs getgraphs.in
			filename_gif0=$filename_snap"*t???????_X.gif"
			filename_gif1=$filename_snap"*t0??????_m.gif"
			filename_gif2=$filename_snap"*t???????_g.gif"
			if (( ${12} == 1 )); then
				gifsicle --delay=50 $filename_gif1 > $filename_snap"_m.gif"
			fi
			if (( ${12} == 2 )); then
				gifsicle --delay=50 $filename_gif0 > $filename_snap"_X.gif"
				gifsicle --delay=50 $filename_gif2 > $filename_snap"_g.gif"
			fi
			if (( ${12} == 3 )); then
				gifsicle --delay=50 $filename_gif1 > $filename_snap"_m.gif"
				gifsicle --delay=50 $filename_gif0 > $filename_snap"_X.gif"
				gifsicle --delay=50 $filename_gif2 > $filename_snap"_g.gif"
			fi
			filename_data=$filename_snap"*.data*"
			filename_m=$filename_snap"*.m"
			filename_gnuplot=$filename_snap"*.gnuplot"
			rm -f $filename_gif0 $filename_gif1 $filename_gif2
			rm -f $filename_data
			rm -f $filename_m
			rm -f $filename_gnuplot
		fi
	fi
   done

   rm -f $executable

   gawk -v finaltime=$2 -v nrun=${17} 'BEGIN{cnt=0;}{if ($1<finaltime) cnt++;}\
	END{print cnt, nrun-cnt, nrun, cnt/nrun;}' $filename1"_time" > $filename1
   gawk -v nrun=${17} 'BEGIN{max=0;}{cnt[$1]++;if ($1>max) max=$1;}\
	END{for (i=0;i<=max;i++) print i, cnt[i];}' $filename1"_conv" >> $filename1
   filename1_each=$filename1"_[0-9]???"
   filename2_each=$filename2"_????"
   filename3_each=$filename3"_????"
   tar zcf $filename1".tgz" $filename1_each
   tar zcf $filename2".tgz" $filename2_each
   tar zcf $filename3".tgz" $filename3_each
   rm -f $filename1_each
   rm -f $filename2_each
   rm -f $filename3_each
   if (( $9 >= 0 && ${12} > 0)); then
	filename4_each=$filename2"_????_?.gif"
	tar zcf $filename2"gif.tgz" $filename4_each
	rm -f $filename4_each
   fi

fi
